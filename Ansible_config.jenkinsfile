pipeline {
    agent any 
    environment {
        ANSIBLE_HOST_KEY_CHECKING = 'False' 
        PYTHON_PATH="/usr/bin/python2.7" 
        AWS_DEFAULT_REGION = 'eu-west-1' 
    }
    options {
      disableConcurrentBuilds()
      parallelsAlwaysFailFast()
      timestamps()
      withCredentials([[
            $class: 'AmazonWebServicesCredentialsBinding', 
            credentialsId: 'awskey', 
            accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
            ]]) 
    }
    stages{ 
        stage('Clear Workspaces') {
            steps {
                sh 'pwd' 
                sh 'ls -la'
                cleanWs()
                sh 'env'
            }//step
        }//stage 
        stage('Clone TF Repo') {
            steps{
                sh 'pwd'
                dir('tf_repo'){
                    sh 'pwd'
                    checkout([$class: 'GitSCM', 
                    branches: [[name: '*/main']], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [[$class: 'CleanCheckout']], 
                    submoduleCfg: [], 
                    userRemoteConfigs: [
                    [url: 'https://github.com/ezequiellladoce/Despliegue_EC2_en_Infraestructura_Core_con_Secrets_Manager.git', credentialsId: '']
                    ]]) 
                    sh'ls'
                }
            } 
        } //stage     
        stage('Get Public IP') {
            steps {
            sh 'pwd' 
            sh 'ls -l'
                dir('tf_repo/Public_ip_from_backend'){
                    sh 'pwd'
                    sh 'terraform --version'
                    sh 'terraform init'
                    sh ' echo  "llego" + params.ACCION' 
                    sh 'terraform plan'
                    sh 'terraform apply -auto-approve'  
                    sh 'echo "[webservers]" > /etc/ansible/hosts'
                    sh 'terraform output pub_ip >> /etc/ansible/hosts'
                }
            }//steps
        } // stage    
        stage('Clone Playbook Repo') {
            steps{
                sh 'pwd'
                dir('Playbook_repo'){
                    sh 'pwd'
                    checkout([$class: 'GitSCM', 
                    branches: [[name: '*/main']], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [[$class: 'CleanCheckout']], 
                    submoduleCfg: [], 
                    userRemoteConfigs: [
                    [url: 'https://github.com/ezequiellladoce/Ansible_EC2_con_Secret_Manager.git', credentialsId: '']
                    ]]) 
                    sh'ls'
                }//dir
            } //steps 
        } //stage
        stage('Apply Ansible Conf') {
            steps{
                sh 'pwd'
                    dir('Playbook_repo'){
                    sh '''
                        #!/bin/bash
                        pwd
                        aws secretsmanager get-secret-value --secret-id "EC2-key-4" --region "us-east-2" --query 'SecretString' --output text > key.pem
                        chmod 400 key.pem 
                        cat key.pem
                        ansible all -m ping -u ec2-user --key-file key.pem
                        ansible-playbook Playbook/playbook.yml -u ec2-user --key-file key.pem
                    '''
                } // dir
            }  //steps   
        }  //stage      
      }  // stages
}//pipeline